Commands to achieve HTTPS using docker_c-nginx-load-balancer_1. We use
transparencycamp.eu as example domain.


### Install Let's Encrypt if it is not yet installed
See https://certbot.eff.org/.


### Retrieve a certificate
First make sure the A and AAAA DNS records of the domain list the IP address
of this server. Temporarily add the domain to
docker/nginx/conf.d/default.conf to retrieve the certificate using HTTP by
adding the following block:
server {
    listen 80;
    server_name
        transparencycamp.eu
        www.transparencycamp.eu
        tcampeu.mu.wikiwise.nl
        test.transparencycamp.eu;

    location ^~ /.well-known/acme-challenge/ {
        root /usr/share/nginx/html/;
    }
}

Reload Nginx. Always test your nginx.conf before going live with it!
   $ sudo docker exec docker_c-nginx-load-balancer_1 nginx -t
   $ sudo docker exec docker_c-nginx-load-balancer_1 nginx -s reload

Now you can retrieve your certificate:
   $ sudo letsencrypt certonly -m developers@openstate.eu --webroot --webroot-path /home/projects/html -d transparencycamp.eu -d www.transparencycamp.eu -d tcampeu.mu.wikiwise.nl -d test.transparencycamp.eu
This gives the following output
IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/transparencycamp.eu/fullchain.pem. Your cert
   will expire on 2016-04-02. To obtain a new version of the
   certificate in the future, simply run Let's Encrypt again.

You can now remove the temporary changes you made to
docker/nginx/conf.d/default.conf. We will add the final default.conf
configurations below.


### Install the certificate
Add the domain (transparencycamp.eu) to docker/import_certificates.sh and run
the script:
   $ sudo ./docker/import_certificates.sh

If this is the first certificate on the server you can now uncomment the top
server block in docker/nginx/conf.d/default.conf to enable a default response
for HTTPS requests.

Edit docker/nginx/conf.d/default.conf
NOTE: When editing default.conf using vim, make sure to add the following line
to your ~/.vimrc file otherwise the container will not receive any changes you
made to it! https://forums.docker.com/t/modify-a-file-which-mount-as-a-data-volume-but-it-didnt-change-in-container/2813/11:
set backupcopy=yes

Add the following section (make sure the proxy_pass and ssl paths are correct!):
server {
    listen 443 ssl http2;
    server_name
        transparencycamp.eu;
    ssl_certificate /etc/letsencrypt/live/transparencycamp.eu/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/transparencycamp.eu/privkey.pem;

    location / {
        proxy_pass http://docker_c-nginx_1;
        proxy_set_header Host $host;
    }

    location ^~ /.well-known/acme-challenge/ {
        root /usr/share/nginx/html/;
    }
}

(optional but recommended) if you do not want the website to be reachable by
both HTTP and HTTPS, but only via HTTPS:
- Remove the domain from the HTTP section
- Add the following block to force redirect from HTTP to HTTPS:
server {
    listen 80;
    server_name
        transparencycamp.eu
        www.transparencycamp.eu;

    return 301 https://$host$request_uri;
}
- Add this line which enables HSTS, to the SSL server section (e.g., add it
below the `ssl_certificate_key` line):
add_header Strict-Transport-Security max-age=31536000;

Always test your nginx.conf before going live with it!
   $ sudo docker exec docker_c-nginx-load-balancer_1 nginx -t

Reload nginx:
   $ sudo docker exec docker_c-nginx-load-balancer_1 nginx -s reload


### Migrate a certificate from one machine to another
When moving a website it is best to migrate the certificate instead of creating
a new one:
   # On the old machine
   $ sudo cp -r --preserve=links /etc/letsencrypt ~
   $ sudo chown -R <your_user_name>:<your_user_name> ~/letsencrypt
   # Log out of the old machine and log into the new machine
   $ rsync -av <IP_OF_OLD_MACHINE>:letsencrypt ~
   $ sudo -i
   $ cp -r /home/<your_user_name>/letsencrypt/archive/<domain> /etc/letsencrypt/archive
   $ cp -r /home/<your_user_name>/letsencrypt/live/<domain> /etc/letsencrypt/live
   $ cp /home/<your_user_name>/letsencrypt/renewal/<domain>.conf /etc/letsencrypt/renewal
   # Make sure the settings in /etc/letsencrypt/renewal/<domain>.conf are correct.
   # Check the .conf files of other certificates if the format has changed.
   # Exit sudo and check if it works
   $ sudo certbot renew --dry-run
   # Remove `~/letsencrypt` on the old and new machine
   # Now follow the other steps above like adding the domain to ./import_certificates.sh
   # and running it, etc.


Certificates are valid for 90 days. We run a cronjob twice a day (on 11:27 and
23:27) which automatically checks if the certificates need to be renewed and
renews them if needed. Also the most recent certificates will be copied into
the docker container of the Nginx load balancer. See INSTALL.txt.


Note: add new SSL domains to the ssl-test monitor which runs a daily check on
the domain using the SSL Labs SSL Server Test to see if something had changed
(e.g., problems with the certificate or vulnarability to a new hack resulting
in a lower grade). The file to add it to:
Oxygen:/home/projects/ssl-test/check-ssl.py
