## Installation and basic operation of the Nginx load balancer
Note: when you use the Nginx load balancer for the first time on a new server,
generate a new dhparams.pem
   $ cd docker
   $ openssl dhparam -out dhparams.pem 2048

Copy the following file and view it to see how to configure new websites
- Copy docker/nginx/conf.d/default.conf.example to docker/nginx/conf.d/default.conf

Create the directory `html` which can be used to serve static files
   $ mkdir ../html

Before starting a new Nginx load balancer container make sure that:
   - no other container exists with the name `docker_c-nginx-load-balancer_1`
     or which binds port 80 and/or 443, otherwise creating a new container will
     fail
   - `docker/nginx/conf.d/default.conf` contains all relevant `server` blocks

Create and start the container:
   $ cd docker
   $ sudo docker-compose up -d

NOTE: When editing docker/nginx/conf.d/default.conf (or docker/nginx/nginx.conf)
using vim, make sure to add the following line to your ~/.vimrc file otherwise
the container will not receive any changes you made to it! https://forums.docker.com/t/modify-a-file-which-mount-as-a-data-volume-but-it-didnt-change-in-container/2813/11:
set backupcopy=yes

Always test your configuration before going live with it!
   $ sudo docker exec docker_c-nginx-load-balancer_1 nginx -t

Reload the configuration:
   # Simple: From the host
   $ sudo docker exec docker_c-nginx-load-balancer_1 nginx -s reload

   # Alternative: From the container
   # Enter the container
   $ sudo docker exec -it docker_c-nginx-load-balancer_1 sh
   # In the container run the following commands
   $ nginx -t
   $ nginx -s reload
   # press ctrl + d to exit the container

Or combine both testing and reloading by using the reload.sh script
   $ cd docker
   $ ./reload.sh


## How to update Nginx (and Certbot)
- NOTE: never(!) run `docker-compose down` as this removes the docker network and all containers won't be able reconnect to the new network!
- Check the most recent version of Nginx Alpine on https://hub.docker.com/_/nginx
    - Also check the changelog (especially for 'Security' related fixes) on http://nginx.org/en/CHANGES
- Change the version of Nginx Alpine in `docker/docker-compose.yml`
    - (optional) change the version of Certbot in `docker/Dockerfile-cerbot` (see the most recent version https://hub.docker.com/r/certbot/certbot/tags and check the changelog https://github.com/certbot/certbot/blob/master/CHANGELOG.md)
- Rebuild and create the new container
   $ cd docker
   $ sudo docker-compose up -d
- You will see some `nginx: [warn] conflicting server name...` messages, these are expected during the build process and can be ignored


## How to add basic access authentication (i.e. password protect) to a directory
# NOTE: we use `.htpasswd` below but you need to create a new file(name) for each
# different website you want to add a password to, so don't add multiple lines to
# the same `.htpasswd` file as this will allow all users/passwords to work for all
# websites that reference this `.htpasswd` file.
- Create a `.htpasswd` file containing the  username. The `.htpasswd` file should
be stored in the `docker/nginx` directory:
   $ sudo sh -c "echo -n '<USERNAME>:' >> docker/nginx/.htpasswd"
- Generate the password, after running this command you will be asked to input a
password and repeat it:
   $ sudo sh -c "openssl passwd -apr1 >> docker/nginx/.htpasswd"
- Add the following two lines to a `server` or `location` block in
`docker/nginx/conf.d/default.conf`:
   auth_basic "Please login";
   auth_basic_user_file /etc/nginx/.htpasswd;
- Reload Nginx
