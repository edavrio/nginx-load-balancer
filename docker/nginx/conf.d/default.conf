### HTTP SECTION

# Default response if no domain is specified.
# In case of a HTTP request on port 80 return a 404.
# In case of a HTTPS request on port 443 return the URL without HTTPS.
# This does give a warning as the domain doesn't match the cert's
# domain, but it will redirect to the correct domain if the user
# confirms the securtiy exception. This block can be uncommented once a
# certificate is available on this server (see INSTALL_HTTPS.txt).
server {
    listen 80;
    return 404;
}
#server {
#    listen 443;
#    # Specify certificate info for a domain, it doesn't matter which domain
#    ssl_certificate /etc/letsencrypt/live/<DOMAIN>/fullchain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/<DOMAIN>/privkey.pem;
#    return 301 http://$host$request_uri;
#}

# Example using an upstream docker specified in docker/nginx/nginx.conf:
## Domains served by docker_c-ocd-nginx_1
#server {
#    listen 80;
#    server_name
#        api.opencultuurdata.nl
#        dumps.opencultuurdata.nl
#        cache.opencultuurdata.nl
#        static.opencultuurdata.nl
#        docs.opencultuurdata.nl;
#
#    location ^~ /.well-known/acme-challenge/ {
#        root /usr/share/nginx/html/;
#    }
#
#    location / {
#        proxy_pass http://docker_c-ocd-nginx_1;
#        proxy_set_header Host $host;
#    }
#}

# Example of a redirect:
## Redirect of openzorgdata.nl
#server {
#    listen 80;
#    server_name
#        openzorgdata.nl
#        www.openzorgdata.nl;
#
#    location / {
#        return 301 https://openstate.eu/nl/open-zorg-data-2/;
#    }
#}

# Example of a static page:
## OpenWob is static and thus doesn't run inside a docker container
#server {
#    listen 80;
#    server_name
#        openwob.nl
#        www.openwob.nl;
#    root /usr/share/nginx/html/openwob;
#    index index.html;
#
#    # Deny acccess to any .git repo's and README's; expand this
#    # section if there are other files which should not be
#    # accessible
#    location ~ /.git/ {
#        deny all;
#    }
#    location ~ README.md {
#        deny all;
#    }
#
#    location / {
#        # First attempt to serve request as file, then
#        # as directory, then fall back to displaying a 404.
#        try_files $uri $uri/ =404;
#        # Uncomment to enable naxsi on this location
#        # include /etc/nginx/naxsi.rules
#    }
#}


### HTTPS SECTION

# Example using an upstream docker specified in docker/nginx/nginx.conf over HTTPS:
## Force redirect from HTTP to HTTPS for the following domains (this section
## can be reused by unrelated domains)
#server {
#    listen 80;
#    server_name
#        pulse.openstate.eu;
#
#    return 301 https://$host$request_uri;
#}
#
## Domains served by dockerpulse_c-pulse_1
#server {
#    listen 443 ssl http2;
#    server_name
#        pulse.openstate.eu;
#    ssl_certificate /etc/letsencrypt/live/pulse.openstate.eu/fullchain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/pulse.openstate.eu/privkey.pem;
#    add_header Strict-Transport-Security max-age=31536000;
#
#    location / {
#        proxy_pass http://dockerpulse_c-pulse_1;
#        proxy_set_header Host $host;
#    }
#
#    location ^~ /.well-known/acme-challenge/ {
#        root /usr/share/nginx/html/;
#    }
#}
